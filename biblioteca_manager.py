"""Es la clase principal que correr√° el programa en el m√≥dulo main.
tiene como atributo un objeto de la clase biblioteca
define metodos para correr el programa"""

from enum import Enum
from biblioteca import Biblioteca
from tipo_item import TipoItem
from autor import Autor
from item_biblioteca import ItemBiblioteca
from mostrar_menu import muetra_el_menu, mostrar_submenu_busqueda, mostrar_submenu_prestamos


class Opciones(Enum):
    VOLVER_MENU = (0,)   # un solo valor basta

    AGREGAR = (1,)
    AGREGAR_OTRO = (1,1)

    BUSCAR = (2,)
    BUSCAR_AUTOR = (2,1)
    BUSCAR_TITULO = (2,2)
    BUSCAR_TIPO = (2,3)

    PRESTAR_DEVOLVER = (3,)
    PRESTAR = (3,1)
    DEVOLVER = (3,2)

    SALIR = (4,)



class BibliotecaManager:
    def __init__(self, biblioteca: Biblioteca):
        self.biblioteca = biblioteca



    def opciones_seleccion(self):
        """Pedir input y devolver un valor Opciones"""
        # aqu√≠ habr√≠a que mapear input -> Enum
        opcion = input("üëâ Elige una opci√≥n: ")
        try:
            return Opciones(int(opcion))  # versi√≥n simplificada
        except ValueError:
            print("‚ö†Ô∏è Opci√≥n no v√°lida")
            return Opciones.VOLVER_MENU

    def opciones_del_menu(self):
        """Usa opciones_seleccion() y gestiona seg√∫n tupla"""

        dispatcher = {
            # Men√∫ principal
            Opciones.VOLVER_MENU: muetra_el_menu,
            Opciones.AGREGAR: muetra_el_menu,
            Opciones.BUSCAR: mostrar_submenu_busqueda,
            Opciones.PRESTAR_DEVOLVER: mostrar_submenu_prestamos,
            Opciones.SALIR: exit,

            # Submen√∫s de AGREGAR
            Opciones.AGREGAR_OTRO: muetra_el_menu,  # tras agregar vuelve al principal

            # Submen√∫s de BUSCAR
            Opciones.BUSCAR_AUTOR: mostrar_submenu_busqueda,
            Opciones.BUSCAR_TITULO: mostrar_submenu_busqueda,
            Opciones.BUSCAR_TIPO: mostrar_submenu_busqueda,

            # Submen√∫s de PRESTAR/DEVOLVER
            Opciones.PRESTAR: mostrar_submenu_prestamos,
            Opciones.DEVOLVER: mostrar_submenu_prestamos,
        }
        # Preguntar opci√≥n
        var = self.opciones_seleccion()

        # Buscar handler en el diccionario
        handler = dispatcher.get(var)

        if handler:
            handler()  # ejecuta la funci√≥n correspondiente
        else:
            print("‚ö†Ô∏è Error: opci√≥n no reconocida")

    def crear_item_desde_input(self):
        """usado por opciones"""
        try:
            codigo = input("C√≥digo: ").strip()
            titulo = input("T√≠tulo: ").strip()

            # pedir tipo (ej: 'DIGITAL', 'FISICO', etc.)
            tipo_str = input("Tipo de item (ej: DIGITAL, FISICO): ").strip().upper()
            tipo = TipoItem[tipo_str]  # lanza KeyError si el usuario escribe mal

            # pedir autores separados por coma
            print("Autores (formato: Nombre|Apellidos|Nacionalidad, separados por coma)")
            autores_str = input("Ejemplo: Miguel|de Cervantes|Espa√±a, Isaac|Asimov|EEUU\n> ").strip()

            autores = []
            if autores_str:
                for datos in autores_str.split(","):
                    partes = [p.strip() for p in datos.split("|")]
                    if len(partes) == 3:
                        nombre, apellidos, nacionalidad = partes
                        autores.append(Autor(nombre, apellidos, nacionalidad))
                    else:
                        raise ValueError(
                            f"Formato de autor inv√°lido: '{datos}'. "
                            "Usa Nombre|Apellidos|Nacionalidad"
                        )

            # crear y devolver el objeto ItemBiblioteca
            return ItemBiblioteca(codigo, titulo, tipo, autores)

        except Exception as e:
            print(f"Error al crear el √≠tem: {e}")
            return None

    # opcion agregar libro
    def gestionar_entrada(self):
        """genera un item que es agregado a la biblioteca"""
        #   crear objeto libro segun input
        item = self.crear_item_desde_input()
        self.biblioteca.agregar(item)

    def opcion_buscar(self, clave):
        """llama a la funci√≥n de las subclases y
        muestra el resultado en pantalla"""
        var = self.biblioteca.busqueda(clave)
        """esto hay que definirlo bien"""
        print(var)

    def opcion_prestar(self, clave):
        self.biblioteca.prestar_devolver(clave, "prestar")

    def opcion_devolver(self, clave):
        self.biblioteca.prestar_devolver(clave, "devolver")

    # RUUN!!!!





    """
    | Estado actual            | Entrada usuario | Nuevo estado             | Comentario                    |
| ------------------------ | --------------- | ------------------------ | ----------------------------- |
| `(0,)` VOLVER\_MENU      | `1`             | `(1,)` AGREGAR           | Ir al men√∫ de agregar         |
|                          | `2`             | `(2,)` BUSCAR            | Ir al submen√∫ de b√∫squeda     |
|                          | `3`             | `(3,)` PRESTAR\_DEVOLVER | Ir al submen√∫ de pr√©stamos    |
|                          | `4`             | `(4,)` SALIR             | Salir del programa            |
|                          | otro            | `(0,)` VOLVER\_MENU      | Entrada inv√°lida              |
| `(1,)` AGREGAR           | `1`             | `(1,1)` AGREGAR\_OTRO    | Subopci√≥n: agregar otro libro |
|                          | `0`             | `(0,)` VOLVER\_MENU      | Volver al men√∫ principal      |
|                          | otro            | `(1,)` AGREGAR           | Entrada inv√°lida ‚Üí permanece  |
| `(2,)` BUSCAR            | `1`             | `(2,1)` BUSCAR\_AUTOR    | Buscar por autor              |
|                          | `2`             | `(2,2)` BUSCAR\_TITULO   | Buscar por t√≠tulo             |
|                          | `3`             | `(2,3)` BUSCAR\_TIPO     | Buscar por tipo               |
|                          | `0`             | `(0,)` VOLVER\_MENU      | Volver al men√∫ principal      |
|                          | otro            | `(2,)` BUSCAR            | Entrada inv√°lida ‚Üí permanece  |
| `(3,)` PRESTAR\_DEVOLVER | `1`             | `(3,1)` PRESTAR          | Prestar un libro              |
|                          | `2`             | `(3,2)` DEVOLVER         | Devolver un libro             |
|                          | `0`             | `(0,)` VOLVER\_MENU      | Volver al men√∫ principal      |
|                          | otro            | `(3,)` PRESTAR\_DEVOLVER | Entrada inv√°lida ‚Üí permanece  |
| `(4,)` SALIR             | ‚Äî               | ‚Äî                        | Estado terminal               |

    """
